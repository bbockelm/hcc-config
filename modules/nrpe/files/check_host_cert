#!/usr/bin/env python
# vim: tabstop=8 expandtab shiftwidth=4 softtabstop=4

import optparse
import fnmatch
import sys, os, subprocess
from datetime import datetime, timedelta
from OpenSSL import crypto

# Nagios exit status
STATE_OK       = 0
STATE_WARNING  = 1
STATE_CRITICAL = 2
STATE_UNKNOWN  = 3

global opts, args

def main():
    global opts, args
    opts, args = parse_opts()

    if args:
        # Use the certs on the command-line
        certs = args
    else:
        # Look in /etc/grid-security
        certs = []
        for root, _, filenames in os.walk('/etc/grid-security/'):
            for filename in fnmatch.filter(filenames, '*cert.pem'):
                certs.append(os.path.join(root, filename))

    messages = []

    results = [check_cert(c, messages) for c in certs]

    print "; ".join(messages)

    sys.exit(max(results))

def check_cert(cert, messages):
    """Check if a certificate is valid and not expired"""
    try:
        check_cert_valid(cert)
        check_cert_expire(cert, timedelta(days=opts.expire_critical))
    except (CertError, IOError) as e:
        messages.append("%s: %s" % (cert, e))
        return STATE_CRITICAL

    try:
        expiry = check_cert_expire(cert, timedelta(days=opts.expire_warning))
    except CertError as e:
        messages.append("%s: %s" % (cert, e))
        return STATE_WARNING

    messages.append("%s: OK (notAfter %s)" % (cert, expiry))
    return STATE_OK

def check_cert_valid(certfile, ca_path="/etc/grid-security/certificates/"):
    """Verify a certificate against system CAs"""
    cert = load_cert(certfile)

    if cert.has_expired():
        raise CertError("Certificate expired")

    proc = subprocess.Popen(["openssl", "verify", "-CApath", ca_path, certfile],
            stdout=subprocess.PIPE, stderr=subprocess.STDOUT)
    output = proc.stdout.read()

    if ": OK\n" in output:
        return True
    else:
        raise CertError("Unexpected error")

def check_cert_expire(certfile, delta):
    """Check if a certificate file expires within a given time delta"""
    cert = load_cert(certfile)

    expiry = datetime.strptime(cert.get_notAfter(), '%Y%m%d%H%M%SZ')

    if cert.has_expired():
        raise CertError("Certificate expired")

    if (datetime.utcnow() + delta >= expiry):
        raise CertError("Certificate expires %s" % \
                (ago_human(datetime.utcnow() - expiry)))

    return expiry

def load_cert(certfile):
    """Load cert from file, returning X509 object"""

    with open(certfile, 'r') as fp:
        certtext = fp.read()

    return crypto.load_certificate(crypto.FILETYPE_PEM, certtext)

def parse_opts():
    """Parse command line options, returning (opts, args)"""
    parser = optparse.OptionParser(usage="%prog [options]")

    parser.add_option("-w", "--warning", help="Expiry warning "
        "[default: %default]", dest="expire_warning", type="float", default=30)
    parser.add_option("-c", "--critical", help="Expiry critical "
        "[default: %default]", dest="expire_critical", type="float", default=7)

    return parser.parse_args()

class CertError(Exception):
    pass

##############################################################################
# ago 0.0.5 (public domain) - https://bitbucket.org/russellballestrini/ago
# make customizable human readable timedeltas
def ago_delta2dict( delta ):
    """Accepts a delta, returns a dictionary of units"""
    delta = abs( delta )
    return {
        'year'   : delta.days / 365 ,
        'day'    : delta.days % 365 ,
        'hour'   : delta.seconds / 3600 ,
        'minute' : (delta.seconds / 60) % 60 ,
        'second' : delta.seconds % 60 ,
        'microsecond' : delta.microseconds
    }

def ago_human(dt, precision=2, past_tense='{0} ago', future_tense='in {0}'):
    """Accept a datetime or timedelta, return a human readable delta string"""
    delta = dt
    if type(dt) is not type(timedelta()):
        delta = datetime.now() - dt

    the_tense = past_tense
    if delta < timedelta(0):
        the_tense = future_tense

    d = ago_delta2dict( delta )
    hlist = []
    count = 0
    units = ( 'year', 'day', 'hour', 'minute', 'second', 'microsecond' )
    for unit in units:
        if count >= precision: break # met precision
        if d[ unit ] == 0: continue # skip 0's
        s = '' if d[ unit ] == 1 else 's' # handle plurals
        hlist.append( '%s %s%s' % ( d[unit], unit, s ) )
        count += 1
    human_delta = ', '.join( hlist )
    return the_tense.format(human_delta)
# END ago
##############################################################################

if __name__ == "__main__":
    #runs script as main
    main()
