##############################################################################
##############################################################################
#
#	DO NOT EDIT - file is being maintained by puppet
#
##############################################################################
##############################################################################


# LOG FACILITY
# The syslog facility that should be used for logging purposes.

log_facility=daemon



# PID FILE
# The name of the file in which the NRPE daemon should write it's process ID
# number.  The file is only written if the NRPE daemon is started by the root
# user and is running in standalone mode.

pid_file=/var/run/nrpe.pid



# PORT NUMBER
# Port number we should wait for connections on.
# NOTE: This must be a non-priviledged port (i.e. > 1024).
# NOTE: This option is ignored if NRPE is running under either inetd or xinetd

server_port=5666



# SERVER ADDRESS
# Address that nrpe should bind to in case there are more than one interface
# and you do not want nrpe to bind on all interfaces.
# NOTE: This option is ignored if NRPE is running under either inetd or xinetd

#server_address=127.0.0.1



# NRPE USER
# This determines the effective user that the NRPE daemon should run as.  
# You can either supply a username or a UID.
# 
# NOTE: This option is ignored if NRPE is running under either inetd or xinetd

nrpe_user=nrpe



# NRPE GROUP
# This determines the effective group that the NRPE daemon should run as.  
# You can either supply a group name or a GID.
# 
# NOTE: This option is ignored if NRPE is running under either inetd or xinetd

nrpe_group=nrpe



# ALLOWED HOST ADDRESSES
# This is an optional comma-delimited list of IP address or hostnames 
# that are allowed to talk to the NRPE daemon.
#
# Note: The daemon only does rudimentary checking of the client's IP
# address.  I would highly recommend adding entries in your /etc/hosts.allow
# file to allow only the specified host to connect to the port
# you are running this daemon on.
#
# NOTE: This option is ignored if NRPE is running under either inetd or xinetd

allowed_hosts=127.0.0.1,red-mon.unl.edu,172.16.200.3
 


# COMMAND ARGUMENT PROCESSING
# This option determines whether or not the NRPE daemon will allow clients
# to specify arguments to commands that are executed.  This option only works
# if the daemon was configured with the --enable-command-args configure script
# option.  
#
# *** ENABLING THIS OPTION IS A SECURITY RISK! *** 
# Read the SECURITY file for information on some of the security implications
# of enabling this variable.
#
# Values: 0=do not allow arguments, 1=allow command arguments

dont_blame_nrpe=0



# COMMAND PREFIX
# This option allows you to prefix all commands with a user-defined string.
# A space is automatically added between the specified prefix string and the
# command line from the command definition.
#
# *** THIS EXAMPLE MAY POSE A POTENTIAL SECURITY RISK, SO USE WITH CAUTION! ***
# Usage scenario: 
# Execute restricted commmands using sudo.  For this to work, you need to add
# the nagios user to your /etc/sudoers.  An example entry for alllowing 
# execution of the plugins from might be:
#
# nagios          ALL=(ALL) NOPASSWD: /usr/lib/nagios/plugins/
#
# This lets the nagios user run all commands in that directory (and only them)
# without asking for a password.  If you do this, make sure you don't give
# random users write access to that directory or its contents!

# command_prefix=/usr/bin/sudo 



# DEBUGGING OPTION
# This option determines whether or not debugging messages are logged to the
# syslog facility.
# Values: 0=debugging off, 1=debugging on

debug=0



# COMMAND TIMEOUT
# This specifies the maximum number of seconds that the NRPE daemon will
# allow plugins to finish executing before killing them off.

command_timeout=60



# CONNECTION TIMEOUT
# This specifies the maximum number of seconds that the NRPE daemon will
# wait for a connection to be established before exiting. This is sometimes
# seen where a network problem stops the SSL being established even though
# all network sessions are connected. This causes the nrpe daemons to
# accumulate, eating system resources. Do not set this too low.

connection_timeout=300



# WEEK RANDOM SEED OPTION
# This directive allows you to use SSL even if your system does not have
# a /dev/random or /dev/urandom (on purpose or because the necessary patches
# were not applied). The random number generator will be seeded from a file
# which is either a file pointed to by the environment valiable $RANDFILE
# or $HOME/.rnd. If neither exists, the pseudo random number generator will
# be initialized and a warning will be issued.
# Values: 0=only seed from /dev/[u]random, 1=also seed from weak randomness

#allow_weak_random_seed=1



# INCLUDE CONFIG FILE
# This directive allows you to include definitions from an external config file.

#include=<somefile.cfg>



# INCLUDE CONFIG DIRECTORY
# This directive allows you to include definitions from config files (with a
# .cfg extension) in one or more directories (with recursion).

include_dir=/etc/nrpe.d/



# COMMAND DEFINITIONS
# Command definitions that this daemon will run.  Definitions
# are in the following format:
#
# command[<command_name>]=<command_line>
#
# When the daemon receives a request to return the results of <command_name>
# it will execute the command specified by the <command_line> argument.
#
# Unlike Nagios, the command line cannot contain macros - it must be
# typed exactly as it should be executed.
#
# Note: Any plugins that are used in the command lines must reside
# on the machine that this daemon is running on!  The examples below
# assume that you have plugins installed in a /usr/local/nagios/libexec
# directory.  Also note that you will have to modify the definitions below
# to match the argument format the plugins expect.  Remember, these are
# examples only!


# The following examples use hardcoded command arguments...
command[check_users]=/usr/lib64/nagios/plugins/check_users -w 5 -c 10
command[check_load]=/usr/lib64/nagios/plugins/check_load -w 15,10,5 -c 30,25,20
command[check_zombie_procs]=/usr/lib64/nagios/plugins/check_procs -w 5 -c 10 -s Z
command[check_total_procs]=/usr/lib64/nagios/plugins/check_procs -w 150 -c 200 



### DISK CHECKS
command[check_space_root]=/usr/lib64/nagios/plugins/check_disk -w 20% -c 10% -p /
command[check_space_scratch]=/usr/lib64/nagios/plugins/check_disk -w 20% -c 10% -p /scratch
command[check_space_opt]=/usr/lib64/nagios/plugins/check_disk -w 20% -c 10% -p /opt
command[check_space_grid_home]=/usr/lib64/nagios/plugins/check_disk -w 20% -c 10% -p /grid_home
command[check_space_hadoop]=/usr/lib64/nagios/plugins/check_disk -w 8% -c 5% -p /mnt/hadoop
command[check_space_unl]=/usr/lib64/nagios/plugins/check_disk -w 20% -c 10% -p /mnt/unl
command[check_space_ksu]=/usr/lib64/nagios/plugins/check_disk -w 20% -c 10% -p /mnt/ksu
command[check_smartmon_sda]=/usr/bin/sudo /usr/lib64/nagios/plugins/check_ide_smart -d /dev/sda -n
command[check_smartmon_sdb]=/usr/bin/sudo /usr/lib64/nagios/plugins/check_ide_smart -d /dev/sdb -n
command[check_smartmon_sdc]=/usr/bin/sudo /usr/lib64/nagios/plugins/check_ide_smart -d /dev/sdc -n
command[check_smartmon_sdd]=/usr/bin/sudo /usr/lib64/nagios/plugins/check_ide_smart -d /dev/sdd -n
command[check_smartmon_sde]=/usr/bin/sudo /usr/lib64/nagios/plugins/check_ide_smart -d /dev/sde -n
command[check_smartmon_sdf]=/usr/bin/sudo /usr/lib64/nagios/plugins/check_ide_smart -d /dev/sdf -n
command[check_smartmon_sdg]=/usr/bin/sudo /usr/lib64/nagios/plugins/check_ide_smart -d /dev/sdg -n
command[check_smartmon_sdh]=/usr/bin/sudo /usr/lib64/nagios/plugins/check_ide_smart -d /dev/sdh -n
command[check_smartmon_sdi]=/usr/bin/sudo /usr/lib64/nagios/plugins/check_ide_smart -d /dev/sdi -n
command[check_smartmon_sdj]=/usr/bin/sudo /usr/lib64/nagios/plugins/check_ide_smart -d /dev/sdj -n
command[check_smartmon_sdk]=/usr/bin/sudo /usr/lib64/nagios/plugins/check_ide_smart -d /dev/sdk -n
command[check_smartmon_sdl]=/usr/bin/sudo /usr/lib64/nagios/plugins/check_ide_smart -d /dev/sdl -n
command[check_md_raid]=/usr/bin/sudo /usr/lib64/nagios/plugins/check_md_raid



### CONDOR CHECKS
command[check_condor_master]=/usr/lib64/nagios/plugins/check_procs -w 1:1 -c 0:2 -a '/opt/condor/usr/sbin/condor_master'
command[check_condor_collector]=/usr/lib64/nagios/plugins/check_procs -w 1:1 -c 0:2 -C condor_collector -u condor
command[check_condor_negotiator]=/usr/lib64/nagios/plugins/check_procs -w 1:1 -c 0:2 -C condor_negotiator -u condor
command[check_condor_schedd]=/usr/lib64/nagios/plugins/check_procs -w 1:1 -c 0:2 -C condor_schedd -u condor
command[check_condor_startd]=/usr/lib64/nagios/plugins/check_procs -w 1:1 -c 0:2 -C condor_startd -u condor


### HADOOP CHECKS
command[check_hadoop_namenode]=/usr/lib64/nagios/plugins/check_procs -w 2:2 -c 1:3 -a "org.apache.hadoop.hdfs.server.namenode.NameNode"
command[check_hadoop_secondarynamenode]=/usr/lib64/nagios/plugins/check_procs -w 2:2 -c 1:3 -a "org.apache.hadoop.hdfs.server.namenode.SecondaryNameNode"
command[check_hadoop_balancer]=/usr/lib64/nagios/plugins/check_file_age -w 7200 -c 216000 -f /scratch/hadoop/logs/hadoop-root-balancer-hadoop-name.out
command[check_hadoop_datanode]=/usr/lib64/nagios/plugins/check_procs -w 2:2 -c 1:3 -a "org.apache.hadoop.hdfs.server.datanode.DataNode"
command[check_hadoop_jobtracker]=/usr/lib64/nagios/plugins/check_procs -w 2:2 -c 1:3 -a "org.apache.hadoop.mapred.JobTracker"
command[check_hadoop_tasktracker]=/usr/lib64/nagios/plugins/check_procs -w 2:2 -c 1:3 -a "org.apache.hadoop.mapred.TaskTracker"
command[check_hadoop_fsimage_age]=/usr/lib64/nagios/plugins/check_file_age -w 1800 -c 3600 -f /scratch/hadoop/dfs/name/current/fsimage
command[check_hadoop_prev_checkpoint_age]=/usr/lib64/nagios/plugins/check_file_age -w 1800 -c 3600 -f /scratch/hadoop/checkpoints/previous.checkpoint/fsimage
command[check_hadoop_mounted]=/usr/lib64/nagios/plugins/check_file_age -w 0 -c 0 -f /mnt/hadoop/hello_world
command[check_fuse_dfs_memory]=/usr/lib64/nagios/plugins/check_procs -w 2097152 -m RSS -C fuse_dfs


### MISC CHECKS
command[check_nscd_running]=/usr/lib64/nagios/plugins/check_procs -w 1:1 -c 0:2 -a '/usr/sbin/nscd'
command[check_fuse_dfs_count]=/usr/lib64/nagios/plugins/check_procs -w 1:1 -c 0:2 -a '/usr/bin/fuse_dfs'
command[check_host_cert]=/usr/lib64/nagios/plugins/check_host_cert -w 30 -c 7
command[check_gridftp_running]=/usr/lib64/nagios/plugins/check_tcp -H localhost -p 2811 -e "220 red-gridftp"
command[check_gridftp_count]=/usr/lib64/nagios/plugins/check_procs -w 50 -c 100 -a 'globus-gridftp'
command[check_xrootd_running]=/usr/bin/sudo /usr/bin/xrdcp_probe.py -u /etc/grid-security/hostcert.pem -k /etc/grid-security/hostkey.pem -p /etc/grid-security/xrd/nrpe_xrootd.proxy `hostname -f` /store/user/gattebury/testfilethingy
command[check_bestman_running]=/usr/lib64/nagios/plugins/check_procs -w 1:1 -c 0:2 -a '/etc/bestman2/conf/bestman2.rc'
command[check_scratch_writable]=/usr/lib64/nagios/plugins/check_writable -d /scratch
command[check_squid]=/home/nagios/squid_check.pl
command[check_red_mounts]=/usr/bin/sudo /opt/kickstart/nagios/check_red_mounts
command[check_nfs04_mounted]=/usr/lib64/nagios/plugins/check_file_age -w 0 -c 0 -f /mnt/nfs04/opt
command[check_megaraid_sas]=/usr/bin/sudo /usr/lib64/nagios/plugins/check_megaraid_sas -m 2 -o 50




# The following examples allow user-supplied arguments and can
# only be used if the NRPE daemon was compiled with support for 
# command arguments *AND* the dont_blame_nrpe directive in this
# config file is set to '1'.  This poses a potential security risk, so
# make sure you read the SECURITY file before doing this.

#command[check_users]=/usr/lib64/nagios/plugins/check_users -w $ARG1$ -c $ARG2$
#command[check_load]=/usr/lib64/nagios/plugins/check_load -w $ARG1$ -c $ARG2$
#command[check_disk]=/usr/lib64/nagios/plugins/check_disk -w $ARG1$ -c $ARG2$ -p $ARG3$
#command[check_procs]=/usr/lib64/nagios/plugins/check_procs -w $ARG1$ -c $ARG2$ -s $ARG3$
